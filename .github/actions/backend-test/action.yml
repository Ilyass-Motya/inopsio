name: 'Backend Test'
description: 'Shared test logic for backend microservices'
inputs:
  service-path:
    description: 'Path to the service directory'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  test-type:
    description: 'Type of tests to run (unit, integration, e2e, all)'
    required: false
    default: 'all'
  coverage-threshold:
    description: 'Coverage threshold percentage'
    required: false
    default: '80'
  cache-key:
    description: 'Cache key for dependencies'
    required: false
    default: 'node-modules'
outputs:
  test-results:
    description: 'Path to test results'
    value: ${{ steps.test-results.outputs.path }}
  coverage-results:
    description: 'Path to coverage results'
    value: ${{ steps.coverage-results.outputs.path }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.service-path }}/package-lock.json

    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: ${{ inputs.service-path }}/node_modules
        key: ${{ runner.os }}-${{ inputs.cache-key }}-${{ hashFiles(format('{0}/package-lock.json', inputs.service-path)) }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cache-key }}-

    - name: Cache test results
      uses: actions/cache@v4
      with:
        path: ${{ inputs.service-path }}/test-results
        key: ${{ runner.os }}-test-results-${{ hashFiles(format('{0}/**/*.test.ts', inputs.service-path), format('{0}/**/*.test.js', inputs.service-path)) }}
        restore-keys: |
          ${{ runner.os }}-test-results-

    - name: Install dependencies
      shell: bash
      run: |
        cd ${{ inputs.service-path }}
        npm ci --prefer-offline --no-audit

    - name: Run linting
      shell: bash
      run: |
        cd ${{ inputs.service-path }}
        npm run lint

    - name: Run type checking
      shell: bash
      run: |
        cd ${{ inputs.service-path }}
        npm run type-check

    - name: Run unit tests
      id: unit-tests
      shell: bash
      if: inputs.test-type == 'unit' || inputs.test-type == 'all'
      run: |
        cd ${{ inputs.service-path }}
        npm run test:unit -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
        echo "path=${{ inputs.service-path }}/test-results" >> $GITHUB_OUTPUT

    - name: Run integration tests
      id: integration-tests
      shell: bash
      if: inputs.test-type == 'integration' || inputs.test-type == 'all'
      run: |
        cd ${{ inputs.service-path }}
        npm run test:integration -- --coverage --watchAll=false
        echo "path=${{ inputs.service-path }}/test-results" >> $GITHUB_OUTPUT

    - name: Run E2E tests
      id: e2e-tests
      shell: bash
      if: inputs.test-type == 'e2e' || inputs.test-type == 'all'
      run: |
        cd ${{ inputs.service-path }}
        npm run test:e2e
        echo "path=${{ inputs.service-path }}/test-results" >> $GITHUB_OUTPUT

    - name: Generate coverage report
      id: coverage-results
      shell: bash
      run: |
        cd ${{ inputs.service-path }}
        if [ -d "coverage" ]; then
          echo "path=${{ inputs.service-path }}/coverage" >> $GITHUB_OUTPUT
          
          # Check coverage threshold
          COVERAGE=$(npm run test:coverage:check 2>/dev/null || echo "0")
          if [ "$COVERAGE" -lt "${{ inputs.coverage-threshold }}" ]; then
            echo "‚ùå Coverage $COVERAGE% is below threshold ${{ inputs.coverage-threshold }}%"
            exit 1
          fi
          echo "‚úÖ Coverage $COVERAGE% meets threshold ${{ inputs.coverage-threshold }}%"
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.job }}-${{ github.sha }}
        path: ${{ inputs.service-path }}/test-results/
        retention-days: 7

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ github.job }}-${{ github.sha }}
        path: ${{ inputs.service-path }}/coverage/
        retention-days: 30

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const testResultsPath = '${{ inputs.service-path }}/test-results';
            const coveragePath = '${{ inputs.service-path }}/coverage';
            
            let comment = `## üß™ Test Results for ${{ inputs.service-path }}\n\n`;
            
            // Add test results if available
            if (fs.existsSync(testResultsPath)) {
              comment += `### Test Results\n`;
              comment += `- **Status**: ${{ steps.unit-tests.outcome || steps.integration-tests.outcome || steps.e2e-tests.outcome }}\n`;
              comment += `- **Test Type**: ${{ inputs.test-type }}\n\n`;
            }
            
            // Add coverage results if available
            if (fs.existsSync(coveragePath)) {
              comment += `### Coverage Results\n`;
              comment += `- **Coverage**: Available in artifacts\n`;
              comment += `- **Threshold**: ${{ inputs.coverage-threshold }}%\n\n`;
            }
            
            comment += `### Artifacts\n`;
            comment += `- Test Results: \`test-results-${{ github.job }}-${{ github.sha }}\`\n`;
            comment += `- Coverage: \`coverage-${{ github.job }}-${{ github.sha }}\`\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create comment:', error);
          }
